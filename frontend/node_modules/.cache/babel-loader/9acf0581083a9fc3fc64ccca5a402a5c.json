{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/CalendarContext.js\";\nimport React, { createContext, useState, useContext } from 'react';\nimport { format, utcToZonedTime } from 'date-fns-tz'; // Import necessary functions from date-fns-tz\n\n// Function to get today's date in MST using date-fns-tz\nconst getTodayDateInMST = () => {\n  const now = new Date();\n  console.log(\"Current local date and time:\", now); // Log current local date and time\n\n  // Convert current date to MST timezone\n  const mstDate = utcToZonedTime(now, 'America/Denver'); // Adjust for MST timezone\n\n  console.log(\"MST date and time:\", mstDate); // Log MST date and time\n\n  // Format date to 'YYYY-MM-DD'\n  return format(mstDate, 'yyyy-MM-dd', {\n    timeZone: 'America/Denver'\n  });\n};\n\n// Create a Context for the calendar\nconst CalendarContext = createContext();\nexport const CalendarProvider = ({\n  children\n}) => {\n  const [selectedDate, setSelectedDate] = useState(getTodayDateInMST()); // Default to today in MST\n\n  // Function to get the start and end of the week based on the current date\n  const getWeekDateRange = (currentDate = selectedDate) => {\n    const startOfWeek = new Date(currentDate);\n    console.log(\"Current Date for Week Range Calculation:\", currentDate); // Log input date\n    const dayOfWeek = startOfWeek.getDay(); // Get the current day of the week (0 for Sunday, 1 for Monday, etc.)\n    const daysToMonday = (dayOfWeek + 6) % 7; // Calculate days to previous Monday\n    startOfWeek.setDate(startOfWeek.getDate() - daysToMonday); // Adjust to Monday\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // Set to Sunday (end of the week)\n\n    console.log(\"Start of Week (Monday):\", startOfWeek); // Log start of the week\n    console.log(\"End of Week (Sunday):\", endOfWeek); // Log end of the week\n\n    return {\n      start: startOfWeek.toISOString().split('T')[0],\n      // Format start date\n      end: endOfWeek.toISOString().split('T')[0] // Format end date\n    };\n  };\n\n  // Function to handle date change by a specific number of days\n  const changeDate = days => {\n    const newDate = new Date(selectedDate);\n    console.log(\"Selected Date before change:\", selectedDate); // Log current selected date\n    newDate.setDate(newDate.getDate() + days); // Adjust date by 'days'\n    const formattedDate = newDate.toISOString().split('T')[0];\n    console.log(\"New Date after change:\", formattedDate); // Log new date\n    setSelectedDate(formattedDate); // Update selectedDate\n  };\n\n  // Expose selectedDate and helper functions via context\n  return /*#__PURE__*/React.createElement(CalendarContext.Provider, {\n    value: {\n      selectedDate,\n      getWeekDateRange,\n      changeDate,\n      setSelectedDate\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n// Custom hook for using the calendar context\nexport const useCalendar = () => useContext(CalendarContext);","map":{"version":3,"names":["React","createContext","useState","useContext","format","utcToZonedTime","getTodayDateInMST","now","Date","console","log","mstDate","timeZone","CalendarContext","CalendarProvider","children","selectedDate","setSelectedDate","getWeekDateRange","currentDate","startOfWeek","dayOfWeek","getDay","daysToMonday","setDate","getDate","endOfWeek","start","toISOString","split","end","changeDate","days","newDate","formattedDate","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useCalendar"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/CalendarContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport { format, utcToZonedTime } from 'date-fns-tz'; // Import necessary functions from date-fns-tz\n\n// Function to get today's date in MST using date-fns-tz\nconst getTodayDateInMST = () => {\n  const now = new Date();\n  console.log(\"Current local date and time:\", now); // Log current local date and time\n\n  // Convert current date to MST timezone\n  const mstDate = utcToZonedTime(now, 'America/Denver'); // Adjust for MST timezone\n\n  console.log(\"MST date and time:\", mstDate); // Log MST date and time\n\n  // Format date to 'YYYY-MM-DD'\n  return format(mstDate, 'yyyy-MM-dd', { timeZone: 'America/Denver' });\n};\n\n// Create a Context for the calendar\nconst CalendarContext = createContext();\n\nexport const CalendarProvider = ({ children }) => {\n  const [selectedDate, setSelectedDate] = useState(getTodayDateInMST()); // Default to today in MST\n\n  // Function to get the start and end of the week based on the current date\n  const getWeekDateRange = (currentDate = selectedDate) => {\n    const startOfWeek = new Date(currentDate);\n    console.log(\"Current Date for Week Range Calculation:\", currentDate); // Log input date\n    const dayOfWeek = startOfWeek.getDay(); // Get the current day of the week (0 for Sunday, 1 for Monday, etc.)\n    const daysToMonday = (dayOfWeek + 6) % 7; // Calculate days to previous Monday\n    startOfWeek.setDate(startOfWeek.getDate() - daysToMonday); // Adjust to Monday\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // Set to Sunday (end of the week)\n\n    console.log(\"Start of Week (Monday):\", startOfWeek); // Log start of the week\n    console.log(\"End of Week (Sunday):\", endOfWeek); // Log end of the week\n\n    return {\n      start: startOfWeek.toISOString().split('T')[0], // Format start date\n      end: endOfWeek.toISOString().split('T')[0], // Format end date\n    };\n  };\n\n  // Function to handle date change by a specific number of days\n  const changeDate = (days) => {\n    const newDate = new Date(selectedDate);\n    console.log(\"Selected Date before change:\", selectedDate); // Log current selected date\n    newDate.setDate(newDate.getDate() + days); // Adjust date by 'days'\n    const formattedDate = newDate.toISOString().split('T')[0];\n    console.log(\"New Date after change:\", formattedDate); // Log new date\n    setSelectedDate(formattedDate); // Update selectedDate\n  };\n\n  // Expose selectedDate and helper functions via context\n  return (\n    <CalendarContext.Provider value={{ selectedDate, getWeekDateRange, changeDate, setSelectedDate }}>\n      {children}\n    </CalendarContext.Provider>\n  );\n};\n\n// Custom hook for using the calendar context\nexport const useCalendar = () => useContext(CalendarContext);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,MAAM,EAAEC,cAAc,QAAQ,aAAa,CAAC,CAAC;;AAEtD;AACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,GAAG,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMI,OAAO,GAAGN,cAAc,CAACE,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;;EAEvDE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,OAAO,CAAC,CAAC,CAAC;;EAE5C;EACA,OAAOP,MAAM,CAACO,OAAO,EAAE,YAAY,EAAE;IAAEC,QAAQ,EAAE;EAAiB,CAAC,CAAC;AACtE,CAAC;;AAED;AACA,MAAMC,eAAe,GAAGZ,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMa,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAChD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAACI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvE;EACA,MAAMY,gBAAgB,GAAGA,CAACC,WAAW,GAAGH,YAAY,KAAK;IACvD,MAAMI,WAAW,GAAG,IAAIZ,IAAI,CAACW,WAAW,CAAC;IACzCV,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAES,WAAW,CAAC,CAAC,CAAC;IACtE,MAAME,SAAS,GAAGD,WAAW,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;IACxC,MAAMC,YAAY,GAAG,CAACF,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1CD,WAAW,CAACI,OAAO,CAACJ,WAAW,CAACK,OAAO,CAAC,CAAC,GAAGF,YAAY,CAAC,CAAC,CAAC;;IAE3D,MAAMG,SAAS,GAAG,IAAIlB,IAAI,CAACY,WAAW,CAAC;IACvCM,SAAS,CAACF,OAAO,CAACE,SAAS,CAACD,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE5ChB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEU,WAAW,CAAC,CAAC,CAAC;IACrDX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEgB,SAAS,CAAC,CAAC,CAAC;;IAEjD,OAAO;MACLC,KAAK,EAAEP,WAAW,CAACQ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE;MAChDC,GAAG,EAAEJ,SAAS,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE;IAC9C,CAAC;EACH,CAAC;;EAED;EACA,MAAME,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,OAAO,GAAG,IAAIzB,IAAI,CAACQ,YAAY,CAAC;IACtCP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEM,YAAY,CAAC,CAAC,CAAC;IAC3DiB,OAAO,CAACT,OAAO,CAACS,OAAO,CAACR,OAAO,CAAC,CAAC,GAAGO,IAAI,CAAC,CAAC,CAAC;IAC3C,MAAME,aAAa,GAAGD,OAAO,CAACL,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzDpB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEwB,aAAa,CAAC,CAAC,CAAC;IACtDjB,eAAe,CAACiB,aAAa,CAAC,CAAC,CAAC;EAClC,CAAC;;EAED;EACA,oBACElC,KAAA,CAAAmC,aAAA,CAACtB,eAAe,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAErB,YAAY;MAAEE,gBAAgB;MAAEa,UAAU;MAAEd;IAAgB,CAAE;IAAAqB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC9F5B,QACuB,CAAC;AAE/B,CAAC;;AAED;AACA,OAAO,MAAM6B,WAAW,GAAGA,CAAA,KAAMzC,UAAU,CAACU,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}