{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n  const {\n    selectedDate\n  } = useCalendar(); // Use the custom hook to access the selected date\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  useEffect(() => {\n    // Fetch tasks for the selected date\n    const fetchTasks = async () => {\n      try {\n        const response = await apiService.getTasksByDate(selectedDate);\n        setTasks(response);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, [selectedDate]);\n  const handleAddTask = async () => {\n    if (newTask.trim()) {\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date: selectedDate\n          // Add more fields like time start/end if needed\n        };\n        const response = await apiService.addTask(taskData);\n        setTasks([...tasks, response]);\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async taskId => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      setTasks(tasks.map(task => task.id === taskId ? updatedTask : task));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    try {\n      await apiService.deleteTask(taskId);\n      setTasks(tasks.filter(task => task.id !== taskId));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Tasks for \", selectedDate), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, tasks.map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    className: `task-item ${task.completed ? 'completed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleToggleCompletion(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteTask(task.id),\n    className: \"delete-task-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTask,\n    onChange: e => setNewTask(e.target.value),\n    placeholder: \"Enter a new task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Add Task\")));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","tasks","setTasks","newTask","setNewTask","fetchTasks","response","getTasksByDate","error","console","handleAddTask","trim","taskData","name","completed","date","addTask","handleToggleCompletion","taskId","updatedTask","toggleTaskCompletion","map","task","id","handleDeleteTask","deleteTask","filter","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","onClick","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n    const { selectedDate } = useCalendar(); // Use the custom hook to access the selected date\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState(\"\");\n\n    useEffect(() => {\n        // Fetch tasks for the selected date\n        const fetchTasks = async () => {\n            try {\n                const response = await apiService.getTasksByDate(selectedDate);\n                setTasks(response);\n            } catch (error) {\n                console.error('Error fetching tasks:', error);\n            }\n        };\n\n        fetchTasks();\n    }, [selectedDate]);\n\n    const handleAddTask = async () => {\n        if (newTask.trim()) {\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date: selectedDate,\n                    // Add more fields like time start/end if needed\n                };\n                const response = await apiService.addTask(taskData);\n                setTasks([...tasks, response]);\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            setTasks(tasks.map(task => task.id === taskId ? updatedTask : task));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await apiService.deleteTask(taskId);\n            setTasks(tasks.filter(task => task.id !== taskId));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    return (\n        <div className=\"task-view-container\">\n            <h2>Tasks for {selectedDate}</h2>\n            <ul className=\"task-list\">\n                {tasks.map(task => (\n                    <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                        <span onClick={() => handleToggleCompletion(task.id)}>\n                            {task.name}\n                        </span>\n                        <button onClick={() => handleDeleteTask(task.id)} className=\"delete-task-button\">\n                            ‚ùå\n                        </button>\n                    </li>\n                ))}\n            </ul>\n            <div className=\"task-input-container\">\n                <input\n                    type=\"text\"\n                    value={newTask}\n                    onChange={(e) => setNewTask(e.target.value)}\n                    placeholder=\"Enter a new task...\"\n                />\n                <button onClick={handleAddTask}>Add Task</button>\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}