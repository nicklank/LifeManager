{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/Journal.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './Journal.css';\nimport { useCalendar } from './CalendarContext';\nconst Journal = () => {\n  const {\n    selectedDate\n  } = useCalendar();\n  const [journalEntry, setJournalEntry] = useState(\"\");\n  const [entryId, setEntryId] = useState(null); // Store the ID of the journal entry\n\n  useEffect(() => {\n    const fetchJournalEntry = async () => {\n      try {\n        console.log('Fetching journal entry for date:', selectedDate);\n        const response = await apiService.getJournalEntryByDate(selectedDate);\n        console.log('API Response:', response);\n        if (response && response.entry_text !== undefined) {\n          setJournalEntry(response.entry_text || \"\");\n          setEntryId(response.id); // Store the ID of the fetched entry\n        } else {\n          setJournalEntry(\"\");\n          setEntryId(null); // Reset the ID if no entry is found\n        }\n      } catch (error) {\n        console.error('Error fetching journal entry:', error);\n      }\n    };\n    fetchJournalEntry();\n  }, [selectedDate]);\n  const handleSaveJournalEntry = async () => {\n    try {\n      const journalData = {\n        entry_text: journalEntry,\n        date: selectedDate\n      };\n      console.log('Saving journal entry:', journalData);\n      if (entryId) {\n        // If an entry exists, update it\n        await apiService.updateJournalEntry(entryId, journalData);\n        console.log('Entry updated successfully');\n      } else {\n        // If no entry exists, create a new one\n        await apiService.createOrUpdateJournalEntry(journalData);\n        console.log('Entry created successfully');\n      }\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"journal-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: journalEntry,\n    onChange: e => setJournalEntry(e.target.value),\n    placeholder: \"Write your thoughts here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSaveJournalEntry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Save Entry\"));\n};\nexport default Journal;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","Journal","selectedDate","journalEntry","setJournalEntry","entryId","setEntryId","fetchJournalEntry","console","log","response","getJournalEntryByDate","entry_text","undefined","id","error","handleSaveJournalEntry","journalData","date","updateJournalEntry","createOrUpdateJournalEntry","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/Journal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './Journal.css';\nimport { useCalendar } from './CalendarContext';\n\nconst Journal = () => {\n    const { selectedDate } = useCalendar();\n    const [journalEntry, setJournalEntry] = useState(\"\");\n    const [entryId, setEntryId] = useState(null); // Store the ID of the journal entry\n\n    useEffect(() => {\n        const fetchJournalEntry = async () => {\n            try {\n                console.log('Fetching journal entry for date:', selectedDate);\n                const response = await apiService.getJournalEntryByDate(selectedDate);\n                console.log('API Response:', response);\n\n                if (response && response.entry_text !== undefined) {\n                    setJournalEntry(response.entry_text || \"\");\n                    setEntryId(response.id); // Store the ID of the fetched entry\n                } else {\n                    setJournalEntry(\"\");\n                    setEntryId(null); // Reset the ID if no entry is found\n                }\n            } catch (error) {\n                console.error('Error fetching journal entry:', error);\n            }\n        };\n\n        fetchJournalEntry();\n    }, [selectedDate]);\n\n    const handleSaveJournalEntry = async () => {\n        try {\n            const journalData = {\n                entry_text: journalEntry,\n                date: selectedDate,\n            };\n\n            console.log('Saving journal entry:', journalData);\n\n            if (entryId) {\n                // If an entry exists, update it\n                await apiService.updateJournalEntry(entryId, journalData);\n                console.log('Entry updated successfully');\n            } else {\n                // If no entry exists, create a new one\n                await apiService.createOrUpdateJournalEntry(journalData);\n                console.log('Entry created successfully');\n            }\n        } catch (error) {\n            console.error('Error saving journal entry:', error);\n        }\n    };\n\n    return (\n        <div className=\"journal-container\">\n            <textarea\n                value={journalEntry}\n                onChange={(e) => setJournalEntry(e.target.value)}\n                placeholder=\"Write your thoughts here...\"\n            />\n            <button onClick={handleSaveJournalEntry}>Save Entry</button>\n        </div>\n    );\n};\n\nexport default Journal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}