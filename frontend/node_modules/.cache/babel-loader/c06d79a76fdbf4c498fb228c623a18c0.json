{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/CalendarContext.js\";\nimport React, { createContext, useState, useContext } from 'react';\n\n// Function to get today's date in MST\nconst getTodayDateInMST = () => {\n  const now = new Date();\n  console.log(\"Current local date and time:\", now); // Log current local date and time\n  const utcTimestamp = now.getTime() + now.getTimezoneOffset() * 60000; // Convert to UTC timestamp\n  const mstOffset = -7; // MST is UTC-7\n  const mstDate = new Date(utcTimestamp + mstOffset * 3600000); // Adjust UTC to MST\n  console.log(\"MST date and time:\", mstDate); // Log MST date and time\n  return mstDate.toISOString().split('T')[0]; // Return as 'YYYY-MM-DD'\n};\n\n// Create a Context for the calendar\nconst CalendarContext = createContext();\nexport const CalendarProvider = ({\n  children\n}) => {\n  const [selectedDate, setSelectedDate] = useState(getTodayDateInMST()); // Default to today in MST\n\n  // Function to get the start and end of the week based on the current date\n  const getWeekDateRange = (currentDate = selectedDate) => {\n    const startOfWeek = new Date(currentDate);\n    console.log(\"Current Date for Week Range Calculation:\", currentDate); // Log input date\n    const dayOfWeek = startOfWeek.getDay(); // Get the current day of the week (0 for Sunday, 1 for Monday, etc.)\n    const daysToMonday = (dayOfWeek + 6) % 7; // Calculate days to previous Monday\n    startOfWeek.setDate(startOfWeek.getDate() - daysToMonday); // Adjust to Monday\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // Set to Sunday (end of the week)\n\n    console.log(\"Start of Week (Monday):\", startOfWeek); // Log start of the week\n    console.log(\"End of Week (Sunday):\", endOfWeek); // Log end of the week\n\n    return {\n      start: startOfWeek.toISOString().split('T')[0],\n      // Format start date\n      end: endOfWeek.toISOString().split('T')[0] // Format end date\n    };\n  };\n\n  // Function to handle date change by a specific number of days\n  const changeDate = days => {\n    const newDate = new Date(selectedDate);\n    console.log(\"Selected Date before change:\", selectedDate); // Log current selected date\n    newDate.setDate(newDate.getDate() + days); // Adjust date by 'days'\n    const formattedDate = newDate.toISOString().split('T')[0];\n    console.log(\"New Date after change:\", formattedDate); // Log new date\n    setSelectedDate(formattedDate); // Update selectedDate\n  };\n\n  // Expose selectedDate and helper functions via context\n  return /*#__PURE__*/React.createElement(CalendarContext.Provider, {\n    value: {\n      selectedDate,\n      getWeekDateRange,\n      changeDate,\n      setSelectedDate\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n// Custom hook for using the calendar context\nexport const useCalendar = () => useContext(CalendarContext);","map":{"version":3,"names":["React","createContext","useState","useContext","getTodayDateInMST","now","Date","console","log","utcTimestamp","getTime","getTimezoneOffset","mstOffset","mstDate","toISOString","split","CalendarContext","CalendarProvider","children","selectedDate","setSelectedDate","getWeekDateRange","currentDate","startOfWeek","dayOfWeek","getDay","daysToMonday","setDate","getDate","endOfWeek","start","end","changeDate","days","newDate","formattedDate","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useCalendar"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/CalendarContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\n// Function to get today's date in MST\nconst getTodayDateInMST = () => {\n  const now = new Date();\n  console.log(\"Current local date and time:\", now); // Log current local date and time\n  const utcTimestamp = now.getTime() + (now.getTimezoneOffset() * 60000); // Convert to UTC timestamp\n  const mstOffset = -7; // MST is UTC-7\n  const mstDate = new Date(utcTimestamp + (mstOffset * 3600000)); // Adjust UTC to MST\n  console.log(\"MST date and time:\", mstDate); // Log MST date and time\n  return mstDate.toISOString().split('T')[0]; // Return as 'YYYY-MM-DD'\n};\n\n// Create a Context for the calendar\nconst CalendarContext = createContext();\n\nexport const CalendarProvider = ({ children }) => {\n  const [selectedDate, setSelectedDate] = useState(getTodayDateInMST()); // Default to today in MST\n\n  // Function to get the start and end of the week based on the current date\n  const getWeekDateRange = (currentDate = selectedDate) => {\n    const startOfWeek = new Date(currentDate);\n    console.log(\"Current Date for Week Range Calculation:\", currentDate); // Log input date\n    const dayOfWeek = startOfWeek.getDay(); // Get the current day of the week (0 for Sunday, 1 for Monday, etc.)\n    const daysToMonday = (dayOfWeek + 6) % 7; // Calculate days to previous Monday\n    startOfWeek.setDate(startOfWeek.getDate() - daysToMonday); // Adjust to Monday\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // Set to Sunday (end of the week)\n\n    console.log(\"Start of Week (Monday):\", startOfWeek); // Log start of the week\n    console.log(\"End of Week (Sunday):\", endOfWeek); // Log end of the week\n\n    return {\n      start: startOfWeek.toISOString().split('T')[0], // Format start date\n      end: endOfWeek.toISOString().split('T')[0], // Format end date\n    };\n  };\n\n  // Function to handle date change by a specific number of days\n  const changeDate = (days) => {\n    const newDate = new Date(selectedDate);\n    console.log(\"Selected Date before change:\", selectedDate); // Log current selected date\n    newDate.setDate(newDate.getDate() + days); // Adjust date by 'days'\n    const formattedDate = newDate.toISOString().split('T')[0];\n    console.log(\"New Date after change:\", formattedDate); // Log new date\n    setSelectedDate(formattedDate); // Update selectedDate\n  };\n\n  // Expose selectedDate and helper functions via context\n  return (\n    <CalendarContext.Provider value={{ selectedDate, getWeekDateRange, changeDate, setSelectedDate }}>\n      {children}\n    </CalendarContext.Provider>\n  );\n};\n\n// Custom hook for using the calendar context\nexport const useCalendar = () => useContext(CalendarContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}