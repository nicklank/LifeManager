{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\nconst TaskView = () => {\n  const {\n    selectedDate,\n    setSelectedDate\n  } = useCalendar(); // Get selected date from CalendarContext\n  const [newTask, setNewTask] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n\n  // Helper function to format date to YYYY-MM-DD without timezone shift (forcing UTC)\n  const formatDateToYYYYMMDD = date => {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  };\n\n  // Function to calculate the start (Monday) and end (Sunday) of the week\n  const getMondayAndSunday = selectedDate => {\n    const date = new Date(selectedDate);\n    const day = date.getDay(); // Get the day of the week (0-6, Sunday-Saturday)\n    const dayAdjusted = (day + 6) % 7; // Adjust to make Monday 0, ..., Sunday 6\n\n    // Calculate Monday of the current week\n    const monday = new Date(date);\n    monday.setDate(date.getDate() - dayAdjusted);\n\n    // Calculate Sunday of the current week\n    const sunday = new Date(monday);\n    sunday.setDate(monday.getDate() + 6);\n    return {\n      monday,\n      sunday\n    };\n  };\n  const {\n    monday,\n    sunday\n  } = getMondayAndSunday(selectedDate); // Calculate week range\n\n  // Generate an array representing each day in the week from Monday to Sunday\n  const daysOfWeek = Array.from({\n    length: 7\n  }, (_, index) => {\n    const day = new Date(monday);\n    day.setDate(monday.getDate() + index);\n    return day;\n  });\n\n  // Fetch tasks for the entire week whenever the selected date changes\n  useEffect(() => {\n    const fetchTasksForWeek = async () => {\n      try {\n        const startDate = formatDateToYYYYMMDD(monday);\n        const endDate = formatDateToYYYYMMDD(sunday);\n        const response = await apiService.getTasks({\n          startDate,\n          endDate\n        });\n        setTasks(response);\n      } catch (error) {\n        console.error('Error fetching tasks for the week:', error);\n      }\n    };\n    fetchTasksForWeek();\n  }, [monday, sunday]);\n  const handleAddTask = async date => {\n    if (newTask.trim()) {\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date: formatDateToYYYYMMDD(date)\n        };\n        const response = await apiService.addTask(taskData);\n        setTasks(prevTasks => [...prevTasks, response]);\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async taskId => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? updatedTask : task));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    try {\n      await apiService.deleteTask(taskId);\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const navigateWeek = direction => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));\n    setSelectedDate(formatDateToYYYYMMDD(newDate));\n  };\n  const resetToToday = () => {\n    setSelectedDate(formatDateToYYYYMMDD(new Date()));\n  };\n\n  // Helper to get tasks for a specific date\n  const getTasksForDate = date => {\n    const dateString = formatDateToYYYYMMDD(date); // Format date as 'YYYY-MM-DD'\n    return tasks.filter(task => task.date === dateString);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateWeek('previous'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"Previous Week\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetToToday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, \"Reset to Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateWeek('next'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Next Week\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, `Tasks for the Week: ${monday.toLocaleDateString()} - ${sunday.toLocaleDateString()}`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, daysOfWeek.map(date => /*#__PURE__*/React.createElement(\"div\", {\n    key: date.toISOString(),\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, date.toLocaleDateString('en-US', {\n    weekday: 'short'\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }), date.getDate()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, daysOfWeek.map(date => /*#__PURE__*/React.createElement(\"div\", {\n    key: date.toISOString(),\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 29\n    }\n  }, getTasksForDate(date).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    className: `task-item ${task.completed ? 'completed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleToggleCompletion(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 41\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteTask(task.id),\n    className: \"delete-task-button\",\n    \"aria-label\": \"Delete task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 41\n    }\n  }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTask,\n    onChange: e => setNewTask(e.target.value),\n    placeholder: `Add task for ${date.toLocaleDateString('en-US', {\n      weekday: 'short'\n    })}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAddTask(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 33\n    }\n  }, \"Add Task\")))))));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","setSelectedDate","newTask","setNewTask","tasks","setTasks","formatDateToYYYYMMDD","date","utcDate","Date","UTC","getFullYear","getMonth","getDate","toISOString","split","getMondayAndSunday","day","getDay","dayAdjusted","monday","setDate","sunday","daysOfWeek","Array","from","length","_","index","fetchTasksForWeek","startDate","endDate","response","getTasks","error","console","handleAddTask","trim","taskData","name","completed","addTask","prevTasks","handleToggleCompletion","taskId","updatedTask","toggleTaskCompletion","map","task","id","handleDeleteTask","deleteTask","filter","navigateWeek","direction","newDate","resetToToday","getTasksForDate","dateString","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleDateString","key","weekday","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\n\nconst TaskView = () => {\n    const { selectedDate, setSelectedDate } = useCalendar(); // Get selected date from CalendarContext\n    const [newTask, setNewTask] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n\n    // Helper function to format date to YYYY-MM-DD without timezone shift (forcing UTC)\n    const formatDateToYYYYMMDD = (date) => {\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n        return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n    };\n\n    // Function to calculate the start (Monday) and end (Sunday) of the week\n    const getMondayAndSunday = (selectedDate) => {\n        const date = new Date(selectedDate);\n        const day = date.getDay(); // Get the day of the week (0-6, Sunday-Saturday)\n        const dayAdjusted = (day + 6) % 7; // Adjust to make Monday 0, ..., Sunday 6\n\n        // Calculate Monday of the current week\n        const monday = new Date(date);\n        monday.setDate(date.getDate() - dayAdjusted);\n\n        // Calculate Sunday of the current week\n        const sunday = new Date(monday);\n        sunday.setDate(monday.getDate() + 6);\n\n        return { monday, sunday };\n    };\n\n    const { monday, sunday } = getMondayAndSunday(selectedDate); // Calculate week range\n\n    // Generate an array representing each day in the week from Monday to Sunday\n    const daysOfWeek = Array.from({ length: 7 }, (_, index) => {\n        const day = new Date(monday);\n        day.setDate(monday.getDate() + index);\n        return day;\n    });\n\n    // Fetch tasks for the entire week whenever the selected date changes\n    useEffect(() => {\n        const fetchTasksForWeek = async () => {\n            try {\n                const startDate = formatDateToYYYYMMDD(monday);\n                const endDate = formatDateToYYYYMMDD(sunday);\n                const response = await apiService.getTasks({\n                    startDate,\n                    endDate\n                });\n                setTasks(response);\n            } catch (error) {\n                console.error('Error fetching tasks for the week:', error);\n            }\n        };\n\n        fetchTasksForWeek();\n    }, [monday, sunday]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date: formatDateToYYYYMMDD(date),\n                };\n                const response = await apiService.addTask(taskData);\n                setTasks(prevTasks => [...prevTasks, response]);\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? updatedTask : task));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await apiService.deleteTask(taskId);\n            setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const navigateWeek = (direction) => {\n        const newDate = new Date(selectedDate);\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));\n        setSelectedDate(formatDateToYYYYMMDD(newDate));\n    };\n\n    const resetToToday = () => {\n        setSelectedDate(formatDateToYYYYMMDD(new Date()));\n    };\n\n    // Helper to get tasks for a specific date\n    const getTasksForDate = (date) => {\n        const dateString = formatDateToYYYYMMDD(date); // Format date as 'YYYY-MM-DD'\n        return tasks.filter(task => task.date === dateString);\n    };\n\n    return (\n        <div className=\"task-view-container\">\n            <div className=\"task-view-controls\">\n                <button onClick={() => navigateWeek('previous')}>Previous Week</button>\n                <button onClick={resetToToday}>Reset to Today</button>\n                <button onClick={() => navigateWeek('next')}>Next Week</button>\n            </div>\n            <h2>{`Tasks for the Week: ${monday.toLocaleDateString()} - ${sunday.toLocaleDateString()}`}</h2>\n            <div className=\"task-table\">\n                <div className=\"task-table-header\">\n                    {daysOfWeek.map(date => (\n                        <div key={date.toISOString()} className=\"task-table-cell date-cell\">\n                            {date.toLocaleDateString('en-US', { weekday: 'short'})}\n                            <br />\n                            {date.getDate()}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"task-table-row\">\n                    {daysOfWeek.map(date => (\n                        <div key={date.toISOString()} className=\"task-table-cell tasks-cell\">\n                            <ul className=\"task-list\">\n                                {getTasksForDate(date).map(task => (\n                                    <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                                        <span onClick={() => handleToggleCompletion(task.id)}>\n                                            {task.name}\n                                        </span>\n                                        <button\n                                            onClick={() => handleDeleteTask(task.id)}\n                                            className=\"delete-task-button\"\n                                            aria-label=\"Delete task\"\n                                        >\n                                            ❌\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                            <div className=\"task-input-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newTask}\n                                    onChange={(e) => setNewTask(e.target.value)}\n                                    placeholder={`Add task for ${date.toLocaleDateString('en-US', { weekday: 'short' })}`}\n                                />\n                                <button onClick={() => handleAddTask(date)}>Add Task</button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}