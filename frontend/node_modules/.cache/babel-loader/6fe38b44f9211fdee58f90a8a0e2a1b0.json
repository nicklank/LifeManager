{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n  const {\n    selectedDate,\n    setSelectedDate\n  } = useCalendar(); // Use the custom hook to access the selected date\n  const [newTask, setNewTask] = useState(\"\");\n  const [weekTasks, setWeekTasks] = useState({}); // State to store tasks grouped by date\n\n  // Function to get the start and end dates of the week for a given date\n  const getWeekRange = date => {\n    const currentDate = new Date(date);\n    const day = currentDate.getDay();\n    const start = new Date(currentDate);\n    const end = new Date(currentDate);\n\n    // Set start to Monday\n    start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n    // Set end to Sunday\n    end.setDate(currentDate.getDate() + (day === 0 ? 0 : 7 - day));\n    return {\n      start: start.toISOString().split('T')[0],\n      end: end.toISOString().split('T')[0]\n    };\n  };\n  useEffect(() => {\n    const fetchWeeklyTasks = async () => {\n      const {\n        start,\n        end\n      } = getWeekRange(selectedDate);\n      try {\n        const response = await apiService.getTasksByDateRange(start, end);\n        const groupedTasks = response.reduce((acc, task) => {\n          if (!acc[task.date]) {\n            acc[task.date] = [];\n          }\n          acc[task.date].push(task);\n          return acc;\n        }, {});\n        setWeekTasks(groupedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks for the week:', error);\n      }\n    };\n    fetchWeeklyTasks();\n  }, [selectedDate]);\n  const handleAddTask = async date => {\n    if (newTask.trim()) {\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date\n        };\n        const response = await apiService.addTask(taskData);\n        setWeekTasks(prev => ({\n          ...prev,\n          [date]: [...(prev[date] || []), response]\n        }));\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async taskId => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      const date = updatedTask.date;\n      setWeekTasks(prev => ({\n        ...prev,\n        [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n      }));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    try {\n      await apiService.deleteTask(taskId);\n      const taskDate = Object.keys(weekTasks).find(date => weekTasks[date].some(task => task.id === taskId));\n      setWeekTasks(prev => ({\n        ...prev,\n        [taskDate]: prev[taskDate].filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const {\n    start\n  } = getWeekRange(selectedDate);\n  const startDate = new Date(start);\n  const daysOfWeek = Array.from({\n    length: 7\n  }, (_, i) => {\n    const day = new Date(startDate);\n    day.setDate(startDate.getDate() + i);\n    return day.toISOString().split('T')[0];\n  });\n  const navigateDay = direction => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));\n    setSelectedDate(newDate.toISOString().split('T')[0]);\n  };\n  const resetWeek = () => {\n    setSelectedDate(new Date().toISOString().split('T')[0]);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateDay('previous'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Previous Day\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetWeek,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Reset to Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateDay('next'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"Next Day\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Tasks for the Week of \", daysOfWeek[0]), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, \"Tasks\")), daysOfWeek.map(date => /*#__PURE__*/React.createElement(\"div\", {\n    key: date,\n    className: \"task-table-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, date), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }, (weekTasks[date] || []).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    className: `task-item ${task.completed ? 'completed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleToggleCompletion(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 41\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteTask(task.id),\n    className: \"delete-task-button\",\n    \"aria-label\": \"Delete task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 41\n    }\n  }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTask,\n    onChange: e => setNewTask(e.target.value),\n    placeholder: \"Enter a new task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAddTask(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 33\n    }\n  }, \"Add Task\")))))));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","setSelectedDate","newTask","setNewTask","weekTasks","setWeekTasks","getWeekRange","date","currentDate","Date","day","getDay","start","end","setDate","getDate","toISOString","split","fetchWeeklyTasks","response","getTasksByDateRange","groupedTasks","reduce","acc","task","push","error","console","handleAddTask","trim","taskData","name","completed","addTask","prev","handleToggleCompletion","taskId","updatedTask","toggleTaskCompletion","map","id","handleDeleteTask","deleteTask","taskDate","Object","keys","find","some","filter","startDate","daysOfWeek","Array","from","length","_","i","navigateDay","direction","newDate","resetWeek","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","key","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n    const { selectedDate, setSelectedDate } = useCalendar(); // Use the custom hook to access the selected date\n    const [newTask, setNewTask] = useState(\"\");\n    const [weekTasks, setWeekTasks] = useState({}); // State to store tasks grouped by date\n\n    // Function to get the start and end dates of the week for a given date\n    const getWeekRange = (date) => {\n        const currentDate = new Date(date);\n        const day = currentDate.getDay();\n        const start = new Date(currentDate);\n        const end = new Date(currentDate);\n\n        // Set start to Monday\n        start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n        // Set end to Sunday\n        end.setDate(currentDate.getDate() + (day === 0 ? 0 : 7 - day));\n\n        return { start: start.toISOString().split('T')[0], end: end.toISOString().split('T')[0] };\n    };\n\n    useEffect(() => {\n        const fetchWeeklyTasks = async () => {\n            const { start, end } = getWeekRange(selectedDate);\n            try {\n                const response = await apiService.getTasksByDateRange(start, end);\n                const groupedTasks = response.reduce((acc, task) => {\n                    if (!acc[task.date]) {\n                        acc[task.date] = [];\n                    }\n                    acc[task.date].push(task);\n                    return acc;\n                }, {});\n                setWeekTasks(groupedTasks);\n            } catch (error) {\n                console.error('Error fetching tasks for the week:', error);\n            }\n        };\n\n        fetchWeeklyTasks();\n    }, [selectedDate]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date,\n                };\n                const response = await apiService.addTask(taskData);\n                setWeekTasks(prev => ({\n                    ...prev,\n                    [date]: [...(prev[date] || []), response]\n                }));\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            const date = updatedTask.date;\n            setWeekTasks(prev => ({\n                ...prev,\n                [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n            }));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await apiService.deleteTask(taskId);\n            const taskDate = Object.keys(weekTasks).find(date => weekTasks[date].some(task => task.id === taskId));\n            setWeekTasks(prev => ({\n                ...prev,\n                [taskDate]: prev[taskDate].filter(task => task.id !== taskId)\n            }));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const { start } = getWeekRange(selectedDate);\n    const startDate = new Date(start);\n    const daysOfWeek = Array.from({ length: 7 }, (_, i) => {\n        const day = new Date(startDate);\n        day.setDate(startDate.getDate() + i);\n        return day.toISOString().split('T')[0];\n    });\n\n    const navigateDay = (direction) => {\n        const newDate = new Date(selectedDate);\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));\n        setSelectedDate(newDate.toISOString().split('T')[0]);\n    };\n\n    const resetWeek = () => {\n        setSelectedDate(new Date().toISOString().split('T')[0]);\n    };\n\n    return (\n        <div className=\"task-view-container\">\n            <div className=\"task-view-controls\">\n                <button onClick={() => navigateDay('previous')}>Previous Day</button>\n                <button onClick={resetWeek}>Reset to Today</button>\n                <button onClick={() => navigateDay('next')}>Next Day</button>\n            </div>\n            <h2>Tasks for the Week of {daysOfWeek[0]}</h2>\n            <div className=\"task-table\">\n                <div className=\"task-table-header\">\n                    <div className=\"task-table-cell date-cell\">Date</div>\n                    <div className=\"task-table-cell tasks-cell\">Tasks</div>\n                </div>\n                {daysOfWeek.map(date => (\n                    <div key={date} className=\"task-table-row\">\n                        <div className=\"task-table-cell date-cell\">{date}</div>\n                        <div className=\"task-table-cell tasks-cell\">\n                            <ul className=\"task-list\">\n                                {(weekTasks[date] || []).map(task => (\n                                    <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                                        <span onClick={() => handleToggleCompletion(task.id)}>\n                                            {task.name}\n                                        </span>\n                                        <button\n                                            onClick={() => handleDeleteTask(task.id)}\n                                            className=\"delete-task-button\"\n                                            aria-label=\"Delete task\"\n                                        >\n                                            ❌\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                            <div className=\"task-input-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newTask}\n                                    onChange={(e) => setNewTask(e.target.value)}\n                                    placeholder=\"Enter a new task...\"\n                                />\n                                <button onClick={() => handleAddTask(date)}>Add Task</button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}