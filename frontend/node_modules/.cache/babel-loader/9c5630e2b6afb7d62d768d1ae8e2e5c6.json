{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/Journal.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your API service\nimport './Journal.css'; // Import the CSS for Journal\nimport { useCalendar } from './CalendarContext'; // Use the custom hook to access the calendar\n\nconst Journal = () => {\n  const {\n    selectedDate\n  } = useCalendar(); // Access the selected date from the calendar context\n  const [journalEntry, setJournalEntry] = useState(\"\");\n  const [existingEntryId, setExistingEntryId] = useState(null); // To store the ID of an existing entry\n\n  useEffect(() => {\n    const fetchJournalEntry = async () => {\n      try {\n        // Format date as yyyy-mm-dd if not already formatted\n        const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n        const response = await apiService.getJournalEntryByDate(formattedDate);\n\n        // Check if response is an array or object and process accordingly\n        if (Array.isArray(response) && response.length > 0) {\n          setJournalEntry(response[0].entry_text || \"\"); // Set the journal entry text\n          setExistingEntryId(response[0].id || null); // Set the ID of the existing entry\n        } else if (response && response.entry_text !== undefined) {\n          setJournalEntry(response.entry_text || \"\"); // Ensure correct field name\n          setExistingEntryId(response.id || null); // Store the ID of the existing entry\n        } else {\n          setJournalEntry(\"\"); // Clear the entry if there's none for the selected date\n          setExistingEntryId(null); // Reset the entry ID\n        }\n      } catch (error) {\n        console.error('Error fetching journal entry:', error);\n      }\n    };\n    fetchJournalEntry();\n  }, [selectedDate]);\n  const handleSaveJournalEntry = async () => {\n    try {\n      const journalData = {\n        entry_text: journalEntry,\n        // Ensure correct field name\n        date: new Date(selectedDate).toISOString().split('T')[0] // Format date as yyyy-mm-dd\n      };\n      if (existingEntryId) {\n        // If an entry exists, update it\n        await apiService.updateJournalEntry(existingEntryId, journalData);\n      } else {\n        // Otherwise, create a new entry\n        await apiService.createJournalEntry(journalData);\n      }\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"journal-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: journalEntry,\n    onChange: e => setJournalEntry(e.target.value),\n    placeholder: \"Write your thoughts here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSaveJournalEntry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Save Entry\"));\n};\nexport default Journal;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","Journal","selectedDate","journalEntry","setJournalEntry","existingEntryId","setExistingEntryId","fetchJournalEntry","formattedDate","Date","toISOString","split","response","getJournalEntryByDate","Array","isArray","length","entry_text","id","undefined","error","console","handleSaveJournalEntry","journalData","date","updateJournalEntry","createJournalEntry","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/Journal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your API service\nimport './Journal.css'; // Import the CSS for Journal\nimport { useCalendar } from './CalendarContext'; // Use the custom hook to access the calendar\n\nconst Journal = () => {\n    const { selectedDate } = useCalendar(); // Access the selected date from the calendar context\n    const [journalEntry, setJournalEntry] = useState(\"\");\n    const [existingEntryId, setExistingEntryId] = useState(null); // To store the ID of an existing entry\n\n    useEffect(() => {\n        const fetchJournalEntry = async () => {\n            try {\n                // Format date as yyyy-mm-dd if not already formatted\n                const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n\n                const response = await apiService.getJournalEntryByDate(formattedDate);\n\n                // Check if response is an array or object and process accordingly\n                if (Array.isArray(response) && response.length > 0) {\n                    setJournalEntry(response[0].entry_text || \"\"); // Set the journal entry text\n                    setExistingEntryId(response[0].id || null); // Set the ID of the existing entry\n                } else if (response && response.entry_text !== undefined) {\n                    setJournalEntry(response.entry_text || \"\"); // Ensure correct field name\n                    setExistingEntryId(response.id || null); // Store the ID of the existing entry\n                } else {\n                    setJournalEntry(\"\"); // Clear the entry if there's none for the selected date\n                    setExistingEntryId(null); // Reset the entry ID\n                }\n            } catch (error) {\n                console.error('Error fetching journal entry:', error);\n            }\n        };\n\n        fetchJournalEntry();\n    }, [selectedDate]);\n\n    const handleSaveJournalEntry = async () => {\n        try {\n            const journalData = {\n                entry_text: journalEntry, // Ensure correct field name\n                date: new Date(selectedDate).toISOString().split('T')[0], // Format date as yyyy-mm-dd\n            };\n\n            if (existingEntryId) {\n                // If an entry exists, update it\n                await apiService.updateJournalEntry(existingEntryId, journalData);\n            } else {\n                // Otherwise, create a new entry\n                await apiService.createJournalEntry(journalData);\n            }\n        } catch (error) {\n            console.error('Error saving journal entry:', error);\n        }\n    };\n\n    return (\n        <div className=\"journal-container\">\n            <textarea\n                value={journalEntry}\n                onChange={(e) => setJournalEntry(e.target.value)}\n                placeholder=\"Write your thoughts here...\"\n            />\n            <button onClick={handleSaveJournalEntry}>Save Entry</button>\n        </div>\n    );\n};\n\nexport default Journal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}