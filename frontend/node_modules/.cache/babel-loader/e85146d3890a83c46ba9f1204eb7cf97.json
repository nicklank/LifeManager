{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\nconst TaskView = () => {\n  const {\n    selectedDate,\n    setSelectedDate\n  } = useCalendar();\n  const [newTask, setNewTask] = useState(\"\");\n  const [weekTasks, setWeekTasks] = useState({});\n\n  // Helper function to get the YYYY-MM-DD format without timezone shift\n  const formatDateToYYYYMMDD = date => {\n    return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n  };\n  const getWeekRange = date => {\n    const currentDate = new Date(date);\n    const day = currentDate.getDay();\n    const start = new Date(currentDate);\n    const end = new Date(currentDate);\n\n    // Adjust start to the previous Monday\n    start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n    // Adjust end to the next Sunday\n    end.setDate(start.getDate() + 6);\n    return {\n      start: formatDateToYYYYMMDD(start),\n      end: formatDateToYYYYMMDD(end)\n    };\n  };\n  const formatHeaderDate = () => {\n    const today = new Date(selectedDate);\n    const options = {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    };\n    return `Week of ${today.toLocaleDateString('en-US', options)}`;\n  };\n  useEffect(() => {\n    const fetchWeeklyTasks = async () => {\n      const {\n        start,\n        end\n      } = getWeekRange(selectedDate);\n      try {\n        const response = await apiService.getTasksByDateRange(start, end);\n        const groupedTasks = response.reduce((acc, task) => {\n          const formattedDate = new Date(date).toISOString().split('T')[0]; // Formats to 'yyyy-mm-dd'\n          if (!acc[formattedDate]) {\n            acc[formattedDate] = [];\n          }\n          acc[formattedDate].push(task);\n          return acc;\n        }, {});\n        setWeekTasks(groupedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks for the week:', error);\n      }\n    };\n    fetchWeeklyTasks();\n  }, [selectedDate]);\n  const handleAddTask = async date => {\n    if (newTask.trim()) {\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date: formatDateToYYYYMMDD(new Date(date)) // Ensure date format is consistent\n        };\n        const response = await apiService.addTask(taskData);\n        setWeekTasks(prev => ({\n          ...prev,\n          [taskData.date]: [...(prev[taskData.date] || []), response]\n        }));\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async taskId => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      const date = formatDateToYYYYMMDD(new Date(updatedTask.date));\n      setWeekTasks(prev => ({\n        ...prev,\n        [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n      }));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    try {\n      await apiService.deleteTask(taskId);\n      const taskDate = Object.keys(weekTasks).find(date => weekTasks[date].some(task => task.id === taskId));\n      setWeekTasks(prev => ({\n        ...prev,\n        [taskDate]: prev[taskDate].filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const {\n    start\n  } = getWeekRange(selectedDate);\n  const startDate = new Date(start);\n  const daysOfWeek = Array.from({\n    length: 7\n  }, (_, i) => {\n    const day = new Date(startDate);\n    day.setDate(startDate.getDate() + i);\n    return {\n      date: formatDateToYYYYMMDD(day),\n      // Ensure date format is consistent (YYYY-MM-DD)\n      dayOfWeek: day.toLocaleDateString('en-US', {\n        weekday: 'long'\n      }),\n      formattedDate: day.toLocaleDateString('en-US', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      })\n    };\n  });\n  const navigateDay = direction => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));\n    setSelectedDate(formatDateToYYYYMMDD(newDate));\n  };\n  const resetWeek = () => {\n    setSelectedDate(formatDateToYYYYMMDD(new Date()));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateDay('previous'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, \"Previous Day\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetWeek,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"Reset to Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateDay('next'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"Next Day\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, formatHeaderDate()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, \"Tasks\")), daysOfWeek.map(({\n    date,\n    dayOfWeek,\n    formattedDate\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: date,\n    className: \"task-table-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, `${dayOfWeek}, ${formattedDate}`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }\n  }, (weekTasks[date] || []).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    className: `task-item ${task.completed ? 'completed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleToggleCompletion(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 41\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteTask(task.id),\n    className: \"delete-task-button\",\n    \"aria-label\": \"Delete task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 41\n    }\n  }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTask,\n    onChange: e => setNewTask(e.target.value),\n    placeholder: \"Enter a new task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAddTask(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 33\n    }\n  }, \"Add Task\")))))));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","setSelectedDate","newTask","setNewTask","weekTasks","setWeekTasks","formatDateToYYYYMMDD","date","Date","getTime","getTimezoneOffset","toISOString","split","getWeekRange","currentDate","day","getDay","start","end","setDate","getDate","formatHeaderDate","today","options","weekday","month","year","toLocaleDateString","fetchWeeklyTasks","response","getTasksByDateRange","groupedTasks","reduce","acc","task","formattedDate","push","error","console","handleAddTask","trim","taskData","name","completed","addTask","prev","handleToggleCompletion","taskId","updatedTask","toggleTaskCompletion","map","id","handleDeleteTask","deleteTask","taskDate","Object","keys","find","some","filter","startDate","daysOfWeek","Array","from","length","_","i","dayOfWeek","navigateDay","direction","newDate","resetWeek","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","key","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\n\nconst TaskView = () => {\n    const { selectedDate, setSelectedDate } = useCalendar();\n    const [newTask, setNewTask] = useState(\"\");\n    const [weekTasks, setWeekTasks] = useState({});\n\n    // Helper function to get the YYYY-MM-DD format without timezone shift\n    const formatDateToYYYYMMDD = (date) => {\n        return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    };\n\n    const getWeekRange = (date) => {\n        const currentDate = new Date(date);\n        const day = currentDate.getDay();\n        const start = new Date(currentDate);\n        const end = new Date(currentDate);\n\n        // Adjust start to the previous Monday\n        start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n        // Adjust end to the next Sunday\n        end.setDate(start.getDate() + 6);\n\n        return {\n            start: formatDateToYYYYMMDD(start),\n            end: formatDateToYYYYMMDD(end),\n        };\n    };\n\n    const formatHeaderDate = () => {\n        const today = new Date(selectedDate);\n        const options = { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' };\n        return `Week of ${today.toLocaleDateString('en-US', options)}`;\n    };\n\n    useEffect(() => {\n        const fetchWeeklyTasks = async () => {\n            const { start, end } = getWeekRange(selectedDate);\n            try {\n                const response = await apiService.getTasksByDateRange(start, end);\n                const groupedTasks = response.reduce((acc, task) => {\n                    const formattedDate = new Date(date).toISOString().split('T')[0]; // Formats to 'yyyy-mm-dd'\n                    if (!acc[formattedDate]) {\n                        acc[formattedDate] = [];\n                    }\n                    acc[formattedDate].push(task);\n                    return acc;\n                }, {});\n                setWeekTasks(groupedTasks);\n            } catch (error) {\n                console.error('Error fetching tasks for the week:', error);\n            }\n        };\n\n        fetchWeeklyTasks();\n    }, [selectedDate]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date: formatDateToYYYYMMDD(new Date(date)), // Ensure date format is consistent\n                };\n                const response = await apiService.addTask(taskData);\n                setWeekTasks(prev => ({\n                    ...prev,\n                    [taskData.date]: [...(prev[taskData.date] || []), response]\n                }));\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            const date = formatDateToYYYYMMDD(new Date(updatedTask.date));\n            setWeekTasks(prev => ({\n                ...prev,\n                [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n            }));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await apiService.deleteTask(taskId);\n            const taskDate = Object.keys(weekTasks).find(date => weekTasks[date].some(task => task.id === taskId));\n            setWeekTasks(prev => ({\n                ...prev,\n                [taskDate]: prev[taskDate].filter(task => task.id !== taskId)\n            }));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const { start } = getWeekRange(selectedDate);\n    const startDate = new Date(start);\n    const daysOfWeek = Array.from({ length: 7 }, (_, i) => {\n        const day = new Date(startDate);\n        day.setDate(startDate.getDate() + i);\n        return {\n            date: formatDateToYYYYMMDD(day), // Ensure date format is consistent (YYYY-MM-DD)\n            dayOfWeek: day.toLocaleDateString('en-US', { weekday: 'long' }),\n            formattedDate: day.toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' })\n        };\n    });\n\n    const navigateDay = (direction) => {\n        const newDate = new Date(selectedDate);\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));\n        setSelectedDate(formatDateToYYYYMMDD(newDate));\n    };\n\n    const resetWeek = () => {\n        setSelectedDate(formatDateToYYYYMMDD(new Date()));\n    };\n\n    return (\n        <div className=\"task-view-container\">\n            <div className=\"task-view-controls\">\n                <button onClick={() => navigateDay('previous')}>Previous Day</button>\n                <button onClick={resetWeek}>Reset to Today</button>\n                <button onClick={() => navigateDay('next')}>Next Day</button>\n            </div>\n            <h2>{formatHeaderDate()}</h2>\n            <div className=\"task-table\">\n                <div className=\"task-table-header\">\n                    <div className=\"task-table-cell date-cell\">Date</div>\n                    <div className=\"task-table-cell tasks-cell\">Tasks</div>\n                </div>\n                {daysOfWeek.map(({ date, dayOfWeek, formattedDate }) => (\n                    <div key={date} className=\"task-table-row\">\n                        <div className=\"task-table-cell date-cell\">{`${dayOfWeek}, ${formattedDate}`}</div>\n                        <div className=\"task-table-cell tasks-cell\">\n                            <ul className=\"task-list\">\n                                {(weekTasks[date] || []).map(task => (\n                                    <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                                        <span onClick={() => handleToggleCompletion(task.id)}>\n                                            {task.name}\n                                        </span>\n                                        <button\n                                            onClick={() => handleDeleteTask(task.id)}\n                                            className=\"delete-task-button\"\n                                            aria-label=\"Delete task\"\n                                        >\n                                            ❌\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                            <div className=\"task-input-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newTask}\n                                    onChange={(e) => setNewTask(e.target.value)}\n                                    placeholder=\"Enter a new task...\"\n                                />\n                                <button onClick={() => handleAddTask(date)}>Add Task</button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}