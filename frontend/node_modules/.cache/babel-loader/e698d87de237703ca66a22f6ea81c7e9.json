{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n  const {\n    selectedDate\n  } = useCalendar(); // Use the custom hook to access the selected date\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  const [weekTasks, setWeekTasks] = useState({}); // State to store tasks grouped by date\n\n  // Function to get the start and end dates of the week for a given date\n  const getWeekRange = date => {\n    const currentDate = new Date(date);\n    const day = currentDate.getDay();\n    const start = new Date(currentDate);\n    const end = new Date(currentDate);\n\n    // Set start to Monday\n    start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n    // Set end to Sunday\n    end.setDate(currentDate.getDate() + (day === 0 ? 0 : 7 - day));\n    return {\n      start: start.toISOString().split('T')[0],\n      end: end.toISOString().split('T')[0]\n    };\n  };\n\n  // Function to get the day of the week as a string\n  const getDayOfWeek = date => {\n    const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const day = new Date(date).getDay();\n    return days[day === 0 ? 6 : day - 1];\n  };\n  useEffect(() => {\n    const fetchWeeklyTasks = async () => {\n      const {\n        start,\n        end\n      } = getWeekRange(selectedDate);\n      try {\n        const response = await apiService.getTasksByDateRange(start, end);\n        const groupedTasks = response.reduce((acc, task) => {\n          if (!acc[task.date]) {\n            acc[task.date] = [];\n          }\n          acc[task.date].push(task);\n          return acc;\n        }, {});\n        setWeekTasks(groupedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks for the week:', error);\n      }\n    };\n    fetchWeeklyTasks();\n  }, [selectedDate]);\n  const handleAddTask = async date => {\n    if (newTask.trim()) {\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date\n          // Add more fields like time start/end if needed\n        };\n        const response = await apiService.addTask(taskData);\n        setWeekTasks(prev => ({\n          ...prev,\n          [date]: [...(prev[date] || []), response]\n        }));\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async taskId => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      const date = updatedTask.date;\n      setWeekTasks(prev => ({\n        ...prev,\n        [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n      }));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    try {\n      await apiService.deleteTask(taskId);\n      const task = tasks.find(task => task.id === taskId);\n      const date = task.date;\n      setWeekTasks(prev => ({\n        ...prev,\n        [date]: prev[date].filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const {\n    start\n  } = getWeekRange(selectedDate);\n  const startDate = new Date(start);\n  const daysOfWeek = Array.from({\n    length: 7\n  }, (_, i) => {\n    const day = new Date(startDate);\n    day.setDate(startDate.getDate() + i);\n    return day.toISOString().split('T')[0];\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Tasks for the Week of \", daysOfWeek[0]), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, \"Tasks\")), daysOfWeek.map(date => /*#__PURE__*/React.createElement(\"div\", {\n    key: date,\n    className: \"task-table-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell date-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, `${getDayOfWeek(date)} (${date})`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table-cell tasks-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, (weekTasks[date] || []).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    className: `task-item ${task.completed ? 'completed' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleToggleCompletion(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteTask(task.id),\n    className: \"delete-task-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 41\n    }\n  }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTask,\n    onChange: e => setNewTask(e.target.value),\n    placeholder: \"Enter a new task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAddTask(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 33\n    }\n  }, \"Add Task\")))))));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","tasks","setTasks","newTask","setNewTask","weekTasks","setWeekTasks","getWeekRange","date","currentDate","Date","day","getDay","start","end","setDate","getDate","toISOString","split","getDayOfWeek","days","fetchWeeklyTasks","response","getTasksByDateRange","groupedTasks","reduce","acc","task","push","error","console","handleAddTask","trim","taskData","name","completed","addTask","prev","handleToggleCompletion","taskId","updatedTask","toggleTaskCompletion","map","id","handleDeleteTask","deleteTask","find","filter","startDate","daysOfWeek","Array","from","length","_","i","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","onClick","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService'; // Import your updated API service for fetching tasks\nimport './TaskView.css'; // Import the CSS for TaskView\nimport { useCalendar } from './CalendarContext'; // Use the custom hook\n\nconst TaskView = () => {\n    const { selectedDate } = useCalendar(); // Use the custom hook to access the selected date\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState(\"\");\n    const [weekTasks, setWeekTasks] = useState({}); // State to store tasks grouped by date\n\n    // Function to get the start and end dates of the week for a given date\n    const getWeekRange = (date) => {\n        const currentDate = new Date(date);\n        const day = currentDate.getDay();\n        const start = new Date(currentDate);\n        const end = new Date(currentDate);\n\n        // Set start to Monday\n        start.setDate(currentDate.getDate() - (day === 0 ? 6 : day - 1));\n        // Set end to Sunday\n        end.setDate(currentDate.getDate() + (day === 0 ? 0 : 7 - day));\n\n        return { start: start.toISOString().split('T')[0], end: end.toISOString().split('T')[0] };\n    };\n\n    // Function to get the day of the week as a string\n    const getDayOfWeek = (date) => {\n        const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        const day = new Date(date).getDay();\n        return days[(day === 0 ? 6 : day - 1)];\n    };\n\n    useEffect(() => {\n        const fetchWeeklyTasks = async () => {\n            const { start, end } = getWeekRange(selectedDate);\n            try {\n                const response = await apiService.getTasksByDateRange(start, end);\n                const groupedTasks = response.reduce((acc, task) => {\n                    if (!acc[task.date]) {\n                        acc[task.date] = [];\n                    }\n                    acc[task.date].push(task);\n                    return acc;\n                }, {});\n                setWeekTasks(groupedTasks);\n            } catch (error) {\n                console.error('Error fetching tasks for the week:', error);\n            }\n        };\n\n        fetchWeeklyTasks();\n    }, [selectedDate]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date,\n                    // Add more fields like time start/end if needed\n                };\n                const response = await apiService.addTask(taskData);\n                setWeekTasks(prev => ({\n                    ...prev,\n                    [date]: [...(prev[date] || []), response]\n                }));\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            const date = updatedTask.date;\n            setWeekTasks(prev => ({\n                ...prev,\n                [date]: prev[date].map(task => task.id === taskId ? updatedTask : task)\n            }));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await apiService.deleteTask(taskId);\n            const task = tasks.find(task => task.id === taskId);\n            const date = task.date;\n            setWeekTasks(prev => ({\n                ...prev,\n                [date]: prev[date].filter(task => task.id !== taskId)\n            }));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const { start } = getWeekRange(selectedDate);\n    const startDate = new Date(start);\n    const daysOfWeek = Array.from({ length: 7 }, (_, i) => {\n        const day = new Date(startDate);\n        day.setDate(startDate.getDate() + i);\n        return day.toISOString().split('T')[0];\n    });\n\n    return (\n        <div className=\"task-view-container\">\n            <h2>Tasks for the Week of {daysOfWeek[0]}</h2>\n            <div className=\"task-table\">\n                <div className=\"task-table-header\">\n                    <div className=\"task-table-cell date-cell\">Date</div>\n                    <div className=\"task-table-cell tasks-cell\">Tasks</div>\n                </div>\n                {daysOfWeek.map(date => (\n                    <div key={date} className=\"task-table-row\">\n                        <div className=\"task-table-cell date-cell\">\n                            {`${getDayOfWeek(date)} (${date})`}\n                        </div>\n                        <div className=\"task-table-cell tasks-cell\">\n                            <ul className=\"task-list\">\n                                {(weekTasks[date] || []).map(task => (\n                                    <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                                        <span onClick={() => handleToggleCompletion(task.id)}>\n                                            {task.name}\n                                        </span>\n                                        <button onClick={() => handleDeleteTask(task.id)} className=\"delete-task-button\">\n                                            ❌\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                            <div className=\"task-input-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newTask}\n                                    onChange={(e) => setNewTask(e.target.value)}\n                                    placeholder=\"Enter a new task...\"\n                                />\n                                <button onClick={() => handleAddTask(date)}>Add Task</button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}