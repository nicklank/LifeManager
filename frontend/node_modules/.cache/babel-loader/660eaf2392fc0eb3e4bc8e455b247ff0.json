{"ast":null,"code":"var _jsxFileName = \"/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\nconst TaskView = () => {\n  const {\n    selectedDate,\n    setSelectedDate\n  } = useCalendar(); // Get selected date from CalendarContext\n  const [newTask, setNewTask] = useState(\"\");\n  const [tasksByDate, setTasksByDate] = useState({});\n\n  // Helper function to format date to YYYY-MM-DD without timezone shift (forcing UTC)\n  const formatDateToYYYYMMDD = date => {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  };\n\n  // Calculate the Monday before (or on) the selected date\n  const getStartOfWeek = date => {\n    const day = date.getDay(); // 0 is Sunday, 1 is Monday, ..., 6 is Saturday\n    const diff = date.getDate() - (day === 0 ? 6 : day - 1); // Adjust when day is Sunday (0)\n    return new Date(date.setDate(diff));\n  };\n\n  // Calculate the Sunday after (or on) the selected date\n  const getEndOfWeek = startOfWeek => {\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6); // Add 6 days to get to Sunday\n    return endOfWeek;\n  };\n\n  // Generate the dates for the week (Monday to Sunday)\n  const generateWeekDates = startOfWeek => {\n    const weekDates = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(startOfWeek.getDate() + i); // Increment day by day\n      weekDates.push(date);\n    }\n    return weekDates;\n  };\n\n  // Fetch tasks for the week\n  const fetchTasksForWeek = async weekDates => {\n    const tasksByDateTemp = {};\n\n    // Fetch tasks for each date in the week\n    for (const date of weekDates) {\n      const formattedDate = formatDateToYYYYMMDD(date);\n      try {\n        const tasks = await apiService.getTasksByDate(formattedDate);\n        tasksByDateTemp[formattedDate] = tasks; // Store tasks keyed by date\n      } catch (error) {\n        console.error(`Error fetching tasks for date ${formattedDate}:`, error);\n      }\n    }\n    setTasksByDate(tasksByDateTemp);\n  };\n\n  // Update tasks whenever selected date changes\n  useEffect(() => {\n    const correctedDate = new Date(selectedDate);\n    correctedDate.setDate(correctedDate.getDate() + 1); // Adjust by one day to align\n\n    const startOfWeek = getStartOfWeek(correctedDate);\n    const endOfWeek = getEndOfWeek(startOfWeek);\n    const weekDates = generateWeekDates(startOfWeek);\n    fetchTasksForWeek(weekDates);\n  }, [selectedDate]);\n  const handleAddTask = async date => {\n    if (newTask.trim()) {\n      const formattedDate = formatDateToYYYYMMDD(date);\n      try {\n        const taskData = {\n          name: newTask,\n          completed: false,\n          date: formattedDate\n        };\n        const response = await apiService.addTask(taskData);\n        setTasksByDate(prevTasksByDate => ({\n          ...prevTasksByDate,\n          [formattedDate]: [...(prevTasksByDate[formattedDate] || []), response]\n        }));\n        setNewTask(\"\");\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  const handleToggleCompletion = async (taskId, taskDate) => {\n    try {\n      const updatedTask = await apiService.toggleTaskCompletion(taskId);\n      setTasksByDate(prevTasksByDate => ({\n        ...prevTasksByDate,\n        [taskDate]: prevTasksByDate[taskDate].map(task => task.id === taskId ? updatedTask : task)\n      }));\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const handleDeleteTask = async (taskId, taskDate) => {\n    try {\n      await apiService.deleteTask(taskId);\n      setTasksByDate(prevTasksByDate => ({\n        ...prevTasksByDate,\n        [taskDate]: prevTasksByDate[taskDate].filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const navigateWeek = direction => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));\n    setSelectedDate(formatDateToYYYYMMDD(newDate));\n  };\n  const resetToToday = () => {\n    setSelectedDate(formatDateToYYYYMMDD(new Date()));\n  };\n\n  // Calculate the week range based on selected date\n  const correctedDate = new Date(selectedDate);\n  correctedDate.setDate(correctedDate.getDate() + 1); // Adjust by one day to align\n  const startOfWeek = getStartOfWeek(correctedDate);\n  const weekDates = generateWeekDates(startOfWeek);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-view-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateWeek('previous'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, \"Previous Week\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetToToday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Reset to Today\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateWeek('next'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Next Week\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, `Week of ${startOfWeek.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  })}`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, weekDates.map((date, index) => {\n    const formattedDate = formatDateToYYYYMMDD(date);\n    const tasks = tasksByDate[formattedDate] || [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-table-row\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-table-cell date-cell\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }, date.toLocaleDateString('en-US', {\n      weekday: 'short'\n    }).charAt(0), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 33\n      }\n    }), date.getDate()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-table-cell tasks-cell\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"task-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, tasks.map(task => /*#__PURE__*/React.createElement(\"li\", {\n      key: task.id,\n      className: `task-item ${task.completed ? 'completed' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => handleToggleCompletion(task.id, formattedDate),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 45\n      }\n    }, task.name), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleDeleteTask(task.id, formattedDate),\n      className: \"delete-task-button\",\n      \"aria-label\": \"Delete task\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 45\n      }\n    }, \"\\u274C\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"Enter a new task...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAddTask(date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 37\n      }\n    }, \"Add Task\"))));\n  })));\n};\nexport default TaskView;","map":{"version":3,"names":["React","useState","useEffect","apiService","useCalendar","TaskView","selectedDate","setSelectedDate","newTask","setNewTask","tasksByDate","setTasksByDate","formatDateToYYYYMMDD","date","utcDate","Date","UTC","getFullYear","getMonth","getDate","toISOString","split","getStartOfWeek","day","getDay","diff","setDate","getEndOfWeek","startOfWeek","endOfWeek","generateWeekDates","weekDates","i","push","fetchTasksForWeek","tasksByDateTemp","formattedDate","tasks","getTasksByDate","error","console","correctedDate","handleAddTask","trim","taskData","name","completed","response","addTask","prevTasksByDate","handleToggleCompletion","taskId","taskDate","updatedTask","toggleTaskCompletion","map","task","id","handleDeleteTask","deleteTask","filter","navigateWeek","direction","newDate","resetToToday","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleDateString","month","year","index","key","weekday","charAt","type","value","onChange","e","target","placeholder"],"sources":["/Users/nicklankau/life-tracker/frontend/src/components/TaskView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiService from '../apiService';\nimport './TaskView.css';\nimport { useCalendar } from './CalendarContext';\n\nconst TaskView = () => {\n    const { selectedDate, setSelectedDate } = useCalendar(); // Get selected date from CalendarContext\n    const [newTask, setNewTask] = useState(\"\");\n    const [tasksByDate, setTasksByDate] = useState({});\n\n    // Helper function to format date to YYYY-MM-DD without timezone shift (forcing UTC)\n    const formatDateToYYYYMMDD = (date) => {\n        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n        return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n    };\n\n    // Calculate the Monday before (or on) the selected date\n    const getStartOfWeek = (date) => {\n        const day = date.getDay(); // 0 is Sunday, 1 is Monday, ..., 6 is Saturday\n        const diff = date.getDate() - (day === 0 ? 6 : day - 1); // Adjust when day is Sunday (0)\n        return new Date(date.setDate(diff));\n    };\n\n    // Calculate the Sunday after (or on) the selected date\n    const getEndOfWeek = (startOfWeek) => {\n        const endOfWeek = new Date(startOfWeek);\n        endOfWeek.setDate(startOfWeek.getDate() + 6); // Add 6 days to get to Sunday\n        return endOfWeek;\n    };\n\n    // Generate the dates for the week (Monday to Sunday)\n    const generateWeekDates = (startOfWeek) => {\n        const weekDates = [];\n        for (let i = 0; i < 7; i++) {\n            const date = new Date(startOfWeek);\n            date.setDate(startOfWeek.getDate() + i); // Increment day by day\n            weekDates.push(date);\n        }\n        return weekDates;\n    };\n\n    // Fetch tasks for the week\n    const fetchTasksForWeek = async (weekDates) => {\n        const tasksByDateTemp = {};\n\n        // Fetch tasks for each date in the week\n        for (const date of weekDates) {\n            const formattedDate = formatDateToYYYYMMDD(date);\n            try {\n                const tasks = await apiService.getTasksByDate(formattedDate);\n                tasksByDateTemp[formattedDate] = tasks; // Store tasks keyed by date\n            } catch (error) {\n                console.error(`Error fetching tasks for date ${formattedDate}:`, error);\n            }\n        }\n\n        setTasksByDate(tasksByDateTemp);\n    };\n\n    // Update tasks whenever selected date changes\n    useEffect(() => {\n        const correctedDate = new Date(selectedDate);\n        correctedDate.setDate(correctedDate.getDate() + 1); // Adjust by one day to align\n\n        const startOfWeek = getStartOfWeek(correctedDate);\n        const endOfWeek = getEndOfWeek(startOfWeek);\n        const weekDates = generateWeekDates(startOfWeek);\n\n        fetchTasksForWeek(weekDates);\n    }, [selectedDate]);\n\n    const handleAddTask = async (date) => {\n        if (newTask.trim()) {\n            const formattedDate = formatDateToYYYYMMDD(date);\n            try {\n                const taskData = {\n                    name: newTask,\n                    completed: false,\n                    date: formattedDate,\n                };\n                const response = await apiService.addTask(taskData);\n                setTasksByDate(prevTasksByDate => ({\n                    ...prevTasksByDate,\n                    [formattedDate]: [...(prevTasksByDate[formattedDate] || []), response]\n                }));\n                setNewTask(\"\");\n            } catch (error) {\n                console.error('Error adding task:', error);\n            }\n        }\n    };\n\n    const handleToggleCompletion = async (taskId, taskDate) => {\n        try {\n            const updatedTask = await apiService.toggleTaskCompletion(taskId);\n            setTasksByDate(prevTasksByDate => ({\n                ...prevTasksByDate,\n                [taskDate]: prevTasksByDate[taskDate].map(task =>\n                    task.id === taskId ? updatedTask : task\n                ),\n            }));\n        } catch (error) {\n            console.error('Error toggling task completion:', error);\n        }\n    };\n\n    const handleDeleteTask = async (taskId, taskDate) => {\n        try {\n            await apiService.deleteTask(taskId);\n            setTasksByDate(prevTasksByDate => ({\n                ...prevTasksByDate,\n                [taskDate]: prevTasksByDate[taskDate].filter(task => task.id !== taskId)\n            }));\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const navigateWeek = (direction) => {\n        const newDate = new Date(selectedDate);\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));\n        setSelectedDate(formatDateToYYYYMMDD(newDate));\n    };\n\n    const resetToToday = () => {\n        setSelectedDate(formatDateToYYYYMMDD(new Date()));\n    };\n\n    // Calculate the week range based on selected date\n    const correctedDate = new Date(selectedDate);\n    correctedDate.setDate(correctedDate.getDate() + 1); // Adjust by one day to align\n    const startOfWeek = getStartOfWeek(correctedDate);\n    const weekDates = generateWeekDates(startOfWeek);\n\n    return (\n        <div className=\"task-view-container\">\n            <div className=\"task-view-controls\">\n                <button onClick={() => navigateWeek('previous')}>Previous Week</button>\n                <button onClick={resetToToday}>Reset to Today</button>\n                <button onClick={() => navigateWeek('next')}>Next Week</button>\n            </div>\n            <h2>{`Week of ${startOfWeek.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`}</h2>\n            <div className=\"task-table\">\n                {weekDates.map((date, index) => {\n                    const formattedDate = formatDateToYYYYMMDD(date);\n                    const tasks = tasksByDate[formattedDate] || [];\n                    return (\n                        <div className=\"task-table-row\" key={index}>\n                            <div className=\"task-table-cell date-cell\">\n                                {date.toLocaleDateString('en-US', { weekday: 'short' }).charAt(0)}\n                                <br />\n                                {date.getDate()}\n                            </div>\n                            <div className=\"task-table-cell tasks-cell\">\n                                <ul className=\"task-list\">\n                                    {tasks.map(task => (\n                                        <li key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>\n                                            <span onClick={() => handleToggleCompletion(task.id, formattedDate)}>\n                                                {task.name}\n                                            </span>\n                                            <button\n                                                onClick={() => handleDeleteTask(task.id, formattedDate)}\n                                                className=\"delete-task-button\"\n                                                aria-label=\"Delete task\"\n                                            >\n                                                ❌\n                                            </button>\n                                        </li>\n                                    ))}\n                                </ul>\n                                <div className=\"task-input-container\">\n                                    <input\n                                        type=\"text\"\n                                        value={newTask}\n                                        onChange={(e) => setNewTask(e.target.value)}\n                                        placeholder=\"Enter a new task...\"\n                                    />\n                                    <button onClick={() => handleAddTask(date)}>Add Task</button>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}